
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000594  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c94  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  000014a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000069f  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005b6  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007c  00000000  00000000  00002115  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>

// Interrupt Service Routine fï¿½r Pin D2
ISR (INT0_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

	PORTB=0x00;
  9a:	85 e2       	ldi	r24, 0x25	; 37
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	10 82       	st	Z, r1
}
  a2:	00 00       	nop
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_2>:

ISR (INT1_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	PORTB=0xFF;
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:

int main(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62

	DDRB=0xFF;
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	PORTB=0xFF;
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18

	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	20 81       	ld	r18, Z
 11e:	8a e2       	ldi	r24, 0x2A	; 42
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2b 7f       	andi	r18, 0xFB	; 251
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
	// PD2 (PCINT0 pin) is now an input

	PORTD |= (1 << PORTD2);    // turn On the Pull-up
 128:	8b e2       	ldi	r24, 0x2B	; 43
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	20 81       	ld	r18, Z
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	24 60       	ori	r18, 0x04	; 4
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
	// PD2 is now an input with pull-up enabled

	DDRD &= ~(1 << DDD3);     // Clear the PD3 pin
 13a:	8a e2       	ldi	r24, 0x2A	; 42
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	20 81       	ld	r18, Z
 142:	8a e2       	ldi	r24, 0x2A	; 42
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	27 7f       	andi	r18, 0xF7	; 247
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	// PD3 (PCINT1 pin) is now an input

	PORTD |= (1 << PORTD3);    // turn On the Pull-up
 14c:	8b e2       	ldi	r24, 0x2B	; 43
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	20 81       	ld	r18, Z
 154:	8b e2       	ldi	r24, 0x2B	; 43
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	28 60       	ori	r18, 0x08	; 8
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
	// PD3 is now an input with pull-up enabled

	// 0-ler Leitung (d2)
	EICRA |= (1 << ISC01);    // set INT0 to trigger on falling edge
 15e:	89 e6       	ldi	r24, 0x69	; 105
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	20 81       	ld	r18, Z
 166:	89 e6       	ldi	r24, 0x69	; 105
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	22 60       	ori	r18, 0x02	; 2
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18

	// 1-ler Leitung (d3)
	EICRA |= (1 << ISC11);    // set INT1 to trigger on falling edge
 170:	89 e6       	ldi	r24, 0x69	; 105
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	20 81       	ld	r18, Z
 178:	89 e6       	ldi	r24, 0x69	; 105
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	28 60       	ori	r18, 0x08	; 8
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18

	EIMSK |= (1 << INT0);     // Turns on INT0
 182:	8d e3       	ldi	r24, 0x3D	; 61
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	20 81       	ld	r18, Z
 18a:	8d e3       	ldi	r24, 0x3D	; 61
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	21 60       	ori	r18, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
	EIMSK |= (1 << INT1);     // Turns on INT1
 194:	8d e3       	ldi	r24, 0x3D	; 61
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	20 81       	ld	r18, Z
 19c:	8d e3       	ldi	r24, 0x3D	; 61
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	22 60       	ori	r18, 0x02	; 2
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18


	sei();                    // turn on interrupts (Global = SET enabled Interrupt)
 1a6:	78 94       	sei

	while(1)
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0xae>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
