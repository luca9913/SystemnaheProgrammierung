
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000534  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c82  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  000013a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000069f  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005b6  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007c  00000000  00000000  0000201d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_14>:

#include <avr/io.h>
#include <avr/interrupt.h>

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	PORTB = ~PORTB;
  9c:	85 e2       	ldi	r24, 0x25	; 37
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	20 81       	ld	r18, Z
  a4:	85 e2       	ldi	r24, 0x25	; 37
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	20 95       	com	r18
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
}
  ae:	00 00       	nop
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	ff 91       	pop	r31
  b6:	ef 91       	pop	r30
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:


int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62

	DDRB = 0xFF;
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	PORTB = 0;
  da:	85 e2       	ldi	r24, 0x25	; 37
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1

	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
  e2:	84 e4       	ldi	r24, 0x44	; 68
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	20 81       	ld	r18, Z
  ea:	84 e4       	ldi	r24, 0x44	; 68
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	22 60       	ori	r18, 0x02	; 2
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18

	// Set the value that you want to count to
	OCR0A = 70; // Kammerton A
  f4:	87 e4       	ldi	r24, 0x47	; 71
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	26 e4       	ldi	r18, 0x46	; 70
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	//OCR0A = 117; // ...und C

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
  fe:	8e e6       	ldi	r24, 0x6E	; 110
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	20 81       	ld	r18, Z
 106:	8e e6       	ldi	r24, 0x6E	; 110
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	22 60       	ori	r18, 0x02	; 2
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18

	sei();         //enable interrupts
 110:	78 94       	sei


	TCCR0B |= (1 << CS02);
 112:	85 e4       	ldi	r24, 0x45	; 69
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	20 81       	ld	r18, Z
 11a:	85 e4       	ldi	r24, 0x45	; 69
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	24 60       	ori	r18, 0x04	; 4
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	// set prescaler to 256 and start the timer


	while (1)
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x5c>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
