
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004d6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000648  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cfc  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  000018e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000069f  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005b6  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007c  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000025d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL /*CPU frequency 16MHz*/
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	6c 97       	sbiw	r28, 0x1c	; 28
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	//Data direction register (determines In-/Output)
	DDRB |= (1 << DDB5) | (1 << DDB4) | (1 << DDB3);
  94:	84 e2       	ldi	r24, 0x24	; 36
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	fc 01       	movw	r30, r24
  9a:	20 81       	ld	r18, Z
  9c:	84 e2       	ldi	r24, 0x24	; 36
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	28 63       	ori	r18, 0x38	; 56
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	//DDRB = 0b00000111; /* 0 = Eingang; 1 = Ausgang*/
	PORTB |= 1 << PORTB5; /*Shift bit by 5 to the left to activate pin 5 of PortB*/
  a6:	85 e2       	ldi	r24, 0x25	; 37
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	fc 01       	movw	r30, r24
  ac:	20 81       	ld	r18, Z
  ae:	85 e2       	ldi	r24, 0x25	; 37
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	20 62       	ori	r18, 0x20	; 32
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
    /* Replace with your application code */
    while (1) 
    {
		PORTB |= 1 << PORTB5;
  b8:	85 e2       	ldi	r24, 0x25	; 37
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	20 81       	ld	r18, Z
  c0:	85 e2       	ldi	r24, 0x25	; 37
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	20 62       	ori	r18, 0x20	; 32
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	aa e7       	ldi	r26, 0x7A	; 122
  d0:	b4 e4       	ldi	r27, 0x44	; 68
  d2:	8f 87       	std	Y+15, r24	; 0x0f
  d4:	98 8b       	std	Y+16, r25	; 0x10
  d6:	a9 8b       	std	Y+17, r26	; 0x11
  d8:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	4a e7       	ldi	r20, 0x7A	; 122
  e0:	55 e4       	ldi	r21, 0x45	; 69
  e2:	6f 85       	ldd	r22, Y+15	; 0x0f
  e4:	78 89       	ldd	r23, Y+16	; 0x10
  e6:	89 89       	ldd	r24, Y+17	; 0x11
  e8:	9a 89       	ldd	r25, Y+18	; 0x12
  ea:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__mulsf3>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	8b 8b       	std	Y+19, r24	; 0x13
  f4:	9c 8b       	std	Y+20, r25	; 0x14
  f6:	ad 8b       	std	Y+21, r26	; 0x15
  f8:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5f e3       	ldi	r21, 0x3F	; 63
 102:	6b 89       	ldd	r22, Y+19	; 0x13
 104:	7c 89       	ldd	r23, Y+20	; 0x14
 106:	8d 89       	ldd	r24, Y+21	; 0x15
 108:	9e 89       	ldd	r25, Y+22	; 0x16
 10a:	0e 94 4e 01 	call	0x29c	; 0x29c <__cmpsf2>
 10e:	88 23       	and	r24, r24
 110:	2c f4       	brge	.+10     	; 0x11c <main+0x9c>
		__ticks = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	98 8f       	std	Y+24, r25	; 0x18
 118:	8f 8b       	std	Y+23, r24	; 0x17
 11a:	3f c0       	rjmp	.+126    	; 0x19a <main+0x11a>
	else if (__tmp > 65535)
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	4f e7       	ldi	r20, 0x7F	; 127
 122:	57 e4       	ldi	r21, 0x47	; 71
 124:	6b 89       	ldd	r22, Y+19	; 0x13
 126:	7c 89       	ldd	r23, Y+20	; 0x14
 128:	8d 89       	ldd	r24, Y+21	; 0x15
 12a:	9e 89       	ldd	r25, Y+22	; 0x16
 12c:	0e 94 cf 01 	call	0x39e	; 0x39e <__gesf2>
 130:	18 16       	cp	r1, r24
 132:	4c f5       	brge	.+82     	; 0x186 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e2       	ldi	r20, 0x20	; 32
 13a:	51 e4       	ldi	r21, 0x41	; 65
 13c:	6f 85       	ldd	r22, Y+15	; 0x0f
 13e:	78 89       	ldd	r23, Y+16	; 0x10
 140:	89 89       	ldd	r24, Y+17	; 0x11
 142:	9a 89       	ldd	r25, Y+18	; 0x12
 144:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__mulsf3>
 148:	dc 01       	movw	r26, r24
 14a:	cb 01       	movw	r24, r22
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__fixunssfsi>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	98 8f       	std	Y+24, r25	; 0x18
 15a:	8f 8b       	std	Y+23, r24	; 0x17
 15c:	0f c0       	rjmp	.+30     	; 0x17c <main+0xfc>
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	9a 8f       	std	Y+26, r25	; 0x1a
 164:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	89 8d       	ldd	r24, Y+25	; 0x19
 168:	9a 8d       	ldd	r25, Y+26	; 0x1a
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xea>
 16e:	9a 8f       	std	Y+26, r25	; 0x1a
 170:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	8f 89       	ldd	r24, Y+23	; 0x17
 174:	98 8d       	ldd	r25, Y+24	; 0x18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	98 8f       	std	Y+24, r25	; 0x18
 17a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	8f 89       	ldd	r24, Y+23	; 0x17
 17e:	98 8d       	ldd	r25, Y+24	; 0x18
 180:	89 2b       	or	r24, r25
 182:	69 f7       	brne	.-38     	; 0x15e <main+0xde>
 184:	14 c0       	rjmp	.+40     	; 0x1ae <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 186:	6b 89       	ldd	r22, Y+19	; 0x13
 188:	7c 89       	ldd	r23, Y+20	; 0x14
 18a:	8d 89       	ldd	r24, Y+21	; 0x15
 18c:	9e 89       	ldd	r25, Y+22	; 0x16
 18e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__fixunssfsi>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	98 8f       	std	Y+24, r25	; 0x18
 198:	8f 8b       	std	Y+23, r24	; 0x17
 19a:	8f 89       	ldd	r24, Y+23	; 0x17
 19c:	98 8d       	ldd	r25, Y+24	; 0x18
 19e:	9c 8f       	std	Y+28, r25	; 0x1c
 1a0:	8b 8f       	std	Y+27, r24	; 0x1b
 1a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x126>
 1aa:	9c 8f       	std	Y+28, r25	; 0x1c
 1ac:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		PORTB=0; //turn all pins of PortB off
 1ae:	85 e2       	ldi	r24, 0x25	; 37
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	10 82       	st	Z, r1
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	aa ef       	ldi	r26, 0xFA	; 250
 1bc:	b4 e4       	ldi	r27, 0x44	; 68
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	ab 83       	std	Y+3, r26	; 0x03
 1c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	4a e7       	ldi	r20, 0x7A	; 122
 1cc:	55 e4       	ldi	r21, 0x45	; 69
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	7a 81       	ldd	r23, Y+2	; 0x02
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9c 81       	ldd	r25, Y+4	; 0x04
 1d6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__mulsf3>
 1da:	dc 01       	movw	r26, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	8d 83       	std	Y+5, r24	; 0x05
 1e0:	9e 83       	std	Y+6, r25	; 0x06
 1e2:	af 83       	std	Y+7, r26	; 0x07
 1e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 e8       	ldi	r20, 0x80	; 128
 1ec:	5f e3       	ldi	r21, 0x3F	; 63
 1ee:	6d 81       	ldd	r22, Y+5	; 0x05
 1f0:	7e 81       	ldd	r23, Y+6	; 0x06
 1f2:	8f 81       	ldd	r24, Y+7	; 0x07
 1f4:	98 85       	ldd	r25, Y+8	; 0x08
 1f6:	0e 94 4e 01 	call	0x29c	; 0x29c <__cmpsf2>
 1fa:	88 23       	and	r24, r24
 1fc:	2c f4       	brge	.+10     	; 0x208 <main+0x188>
		__ticks = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9a 87       	std	Y+10, r25	; 0x0a
 204:	89 87       	std	Y+9, r24	; 0x09
 206:	3f c0       	rjmp	.+126    	; 0x286 <main+0x206>
	else if (__tmp > 65535)
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	3f ef       	ldi	r19, 0xFF	; 255
 20c:	4f e7       	ldi	r20, 0x7F	; 127
 20e:	57 e4       	ldi	r21, 0x47	; 71
 210:	6d 81       	ldd	r22, Y+5	; 0x05
 212:	7e 81       	ldd	r23, Y+6	; 0x06
 214:	8f 81       	ldd	r24, Y+7	; 0x07
 216:	98 85       	ldd	r25, Y+8	; 0x08
 218:	0e 94 cf 01 	call	0x39e	; 0x39e <__gesf2>
 21c:	18 16       	cp	r1, r24
 21e:	4c f5       	brge	.+82     	; 0x272 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e2       	ldi	r20, 0x20	; 32
 226:	51 e4       	ldi	r21, 0x41	; 65
 228:	69 81       	ldd	r22, Y+1	; 0x01
 22a:	7a 81       	ldd	r23, Y+2	; 0x02
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__mulsf3>
 234:	dc 01       	movw	r26, r24
 236:	cb 01       	movw	r24, r22
 238:	bc 01       	movw	r22, r24
 23a:	cd 01       	movw	r24, r26
 23c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__fixunssfsi>
 240:	dc 01       	movw	r26, r24
 242:	cb 01       	movw	r24, r22
 244:	9a 87       	std	Y+10, r25	; 0x0a
 246:	89 87       	std	Y+9, r24	; 0x09
 248:	0f c0       	rjmp	.+30     	; 0x268 <main+0x1e8>
 24a:	80 e9       	ldi	r24, 0x90	; 144
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	9c 87       	std	Y+12, r25	; 0x0c
 250:	8b 87       	std	Y+11, r24	; 0x0b
 252:	8b 85       	ldd	r24, Y+11	; 0x0b
 254:	9c 85       	ldd	r25, Y+12	; 0x0c
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x1d6>
 25a:	9c 87       	std	Y+12, r25	; 0x0c
 25c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	89 85       	ldd	r24, Y+9	; 0x09
 260:	9a 85       	ldd	r25, Y+10	; 0x0a
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	9a 87       	std	Y+10, r25	; 0x0a
 266:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 268:	89 85       	ldd	r24, Y+9	; 0x09
 26a:	9a 85       	ldd	r25, Y+10	; 0x0a
 26c:	89 2b       	or	r24, r25
 26e:	69 f7       	brne	.-38     	; 0x24a <main+0x1ca>
 270:	14 c0       	rjmp	.+40     	; 0x29a <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 272:	6d 81       	ldd	r22, Y+5	; 0x05
 274:	7e 81       	ldd	r23, Y+6	; 0x06
 276:	8f 81       	ldd	r24, Y+7	; 0x07
 278:	98 85       	ldd	r25, Y+8	; 0x08
 27a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__fixunssfsi>
 27e:	dc 01       	movw	r26, r24
 280:	cb 01       	movw	r24, r22
 282:	9a 87       	std	Y+10, r25	; 0x0a
 284:	89 87       	std	Y+9, r24	; 0x09
 286:	89 85       	ldd	r24, Y+9	; 0x09
 288:	9a 85       	ldd	r25, Y+10	; 0x0a
 28a:	9e 87       	std	Y+14, r25	; 0x0e
 28c:	8d 87       	std	Y+13, r24	; 0x0d
 28e:	8d 85       	ldd	r24, Y+13	; 0x0d
 290:	9e 85       	ldd	r25, Y+14	; 0x0e
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0x212>
 296:	9e 87       	std	Y+14, r25	; 0x0e
 298:	8d 87       	std	Y+13, r24	; 0x0d
	//DDRB = 0b00000111; /* 0 = Eingang; 1 = Ausgang*/
	PORTB |= 1 << PORTB5; /*Shift bit by 5 to the left to activate pin 5 of PortB*/
    /* Replace with your application code */
    while (1) 
    {
		PORTB |= 1 << PORTB5;
 29a:	0e cf       	rjmp	.-484    	; 0xb8 <main+0x38>

0000029c <__cmpsf2>:
 29c:	0e 94 82 01 	call	0x304	; 0x304 <__fp_cmp>
 2a0:	08 f4       	brcc	.+2      	; 0x2a4 <__cmpsf2+0x8>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	08 95       	ret

000002a6 <__fixunssfsi>:
 2a6:	0e 94 ae 01 	call	0x35c	; 0x35c <__fp_splitA>
 2aa:	88 f0       	brcs	.+34     	; 0x2ce <__fixunssfsi+0x28>
 2ac:	9f 57       	subi	r25, 0x7F	; 127
 2ae:	98 f0       	brcs	.+38     	; 0x2d6 <__fixunssfsi+0x30>
 2b0:	b9 2f       	mov	r27, r25
 2b2:	99 27       	eor	r25, r25
 2b4:	b7 51       	subi	r27, 0x17	; 23
 2b6:	b0 f0       	brcs	.+44     	; 0x2e4 <__fixunssfsi+0x3e>
 2b8:	e1 f0       	breq	.+56     	; 0x2f2 <__fixunssfsi+0x4c>
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	1a f0       	brmi	.+6      	; 0x2ca <__fixunssfsi+0x24>
 2c4:	ba 95       	dec	r27
 2c6:	c9 f7       	brne	.-14     	; 0x2ba <__fixunssfsi+0x14>
 2c8:	14 c0       	rjmp	.+40     	; 0x2f2 <__fixunssfsi+0x4c>
 2ca:	b1 30       	cpi	r27, 0x01	; 1
 2cc:	91 f0       	breq	.+36     	; 0x2f2 <__fixunssfsi+0x4c>
 2ce:	0e 94 c8 01 	call	0x390	; 0x390 <__fp_zero>
 2d2:	b1 e0       	ldi	r27, 0x01	; 1
 2d4:	08 95       	ret
 2d6:	0c 94 c8 01 	jmp	0x390	; 0x390 <__fp_zero>
 2da:	67 2f       	mov	r22, r23
 2dc:	78 2f       	mov	r23, r24
 2de:	88 27       	eor	r24, r24
 2e0:	b8 5f       	subi	r27, 0xF8	; 248
 2e2:	39 f0       	breq	.+14     	; 0x2f2 <__fixunssfsi+0x4c>
 2e4:	b9 3f       	cpi	r27, 0xF9	; 249
 2e6:	cc f3       	brlt	.-14     	; 0x2da <__fixunssfsi+0x34>
 2e8:	86 95       	lsr	r24
 2ea:	77 95       	ror	r23
 2ec:	67 95       	ror	r22
 2ee:	b3 95       	inc	r27
 2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__fixunssfsi+0x42>
 2f2:	3e f4       	brtc	.+14     	; 0x302 <__fixunssfsi+0x5c>
 2f4:	90 95       	com	r25
 2f6:	80 95       	com	r24
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	8f 4f       	sbci	r24, 0xFF	; 255
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	08 95       	ret

00000304 <__fp_cmp>:
 304:	99 0f       	add	r25, r25
 306:	00 08       	sbc	r0, r0
 308:	55 0f       	add	r21, r21
 30a:	aa 0b       	sbc	r26, r26
 30c:	e0 e8       	ldi	r30, 0x80	; 128
 30e:	fe ef       	ldi	r31, 0xFE	; 254
 310:	16 16       	cp	r1, r22
 312:	17 06       	cpc	r1, r23
 314:	e8 07       	cpc	r30, r24
 316:	f9 07       	cpc	r31, r25
 318:	c0 f0       	brcs	.+48     	; 0x34a <__fp_cmp+0x46>
 31a:	12 16       	cp	r1, r18
 31c:	13 06       	cpc	r1, r19
 31e:	e4 07       	cpc	r30, r20
 320:	f5 07       	cpc	r31, r21
 322:	98 f0       	brcs	.+38     	; 0x34a <__fp_cmp+0x46>
 324:	62 1b       	sub	r22, r18
 326:	73 0b       	sbc	r23, r19
 328:	84 0b       	sbc	r24, r20
 32a:	95 0b       	sbc	r25, r21
 32c:	39 f4       	brne	.+14     	; 0x33c <__fp_cmp+0x38>
 32e:	0a 26       	eor	r0, r26
 330:	61 f0       	breq	.+24     	; 0x34a <__fp_cmp+0x46>
 332:	23 2b       	or	r18, r19
 334:	24 2b       	or	r18, r20
 336:	25 2b       	or	r18, r21
 338:	21 f4       	brne	.+8      	; 0x342 <__fp_cmp+0x3e>
 33a:	08 95       	ret
 33c:	0a 26       	eor	r0, r26
 33e:	09 f4       	brne	.+2      	; 0x342 <__fp_cmp+0x3e>
 340:	a1 40       	sbci	r26, 0x01	; 1
 342:	a6 95       	lsr	r26
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	81 1d       	adc	r24, r1
 348:	81 1d       	adc	r24, r1
 34a:	08 95       	ret

0000034c <__fp_split3>:
 34c:	57 fd       	sbrc	r21, 7
 34e:	90 58       	subi	r25, 0x80	; 128
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	59 f0       	breq	.+22     	; 0x36c <__fp_splitA+0x10>
 356:	5f 3f       	cpi	r21, 0xFF	; 255
 358:	71 f0       	breq	.+28     	; 0x376 <__fp_splitA+0x1a>
 35a:	47 95       	ror	r20

0000035c <__fp_splitA>:
 35c:	88 0f       	add	r24, r24
 35e:	97 fb       	bst	r25, 7
 360:	99 1f       	adc	r25, r25
 362:	61 f0       	breq	.+24     	; 0x37c <__fp_splitA+0x20>
 364:	9f 3f       	cpi	r25, 0xFF	; 255
 366:	79 f0       	breq	.+30     	; 0x386 <__fp_splitA+0x2a>
 368:	87 95       	ror	r24
 36a:	08 95       	ret
 36c:	12 16       	cp	r1, r18
 36e:	13 06       	cpc	r1, r19
 370:	14 06       	cpc	r1, r20
 372:	55 1f       	adc	r21, r21
 374:	f2 cf       	rjmp	.-28     	; 0x35a <__fp_split3+0xe>
 376:	46 95       	lsr	r20
 378:	f1 df       	rcall	.-30     	; 0x35c <__fp_splitA>
 37a:	08 c0       	rjmp	.+16     	; 0x38c <__fp_splitA+0x30>
 37c:	16 16       	cp	r1, r22
 37e:	17 06       	cpc	r1, r23
 380:	18 06       	cpc	r1, r24
 382:	99 1f       	adc	r25, r25
 384:	f1 cf       	rjmp	.-30     	; 0x368 <__fp_splitA+0xc>
 386:	86 95       	lsr	r24
 388:	71 05       	cpc	r23, r1
 38a:	61 05       	cpc	r22, r1
 38c:	08 94       	sec
 38e:	08 95       	ret

00000390 <__fp_zero>:
 390:	e8 94       	clt

00000392 <__fp_szero>:
 392:	bb 27       	eor	r27, r27
 394:	66 27       	eor	r22, r22
 396:	77 27       	eor	r23, r23
 398:	cb 01       	movw	r24, r22
 39a:	97 f9       	bld	r25, 7
 39c:	08 95       	ret

0000039e <__gesf2>:
 39e:	0e 94 82 01 	call	0x304	; 0x304 <__fp_cmp>
 3a2:	08 f4       	brcc	.+2      	; 0x3a6 <__gesf2+0x8>
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	08 95       	ret

000003a8 <__mulsf3>:
 3a8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__mulsf3x>
 3ac:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_round>
 3b0:	0e 94 4a 02 	call	0x494	; 0x494 <__fp_pscA>
 3b4:	38 f0       	brcs	.+14     	; 0x3c4 <__mulsf3+0x1c>
 3b6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_pscB>
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <__mulsf3+0x1c>
 3bc:	95 23       	and	r25, r21
 3be:	11 f0       	breq	.+4      	; 0x3c4 <__mulsf3+0x1c>
 3c0:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_inf>
 3c4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__fp_nan>
 3c8:	11 24       	eor	r1, r1
 3ca:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_szero>

000003ce <__mulsf3x>:
 3ce:	0e 94 a6 01 	call	0x34c	; 0x34c <__fp_split3>
 3d2:	70 f3       	brcs	.-36     	; 0x3b0 <__mulsf3+0x8>

000003d4 <__mulsf3_pse>:
 3d4:	95 9f       	mul	r25, r21
 3d6:	c1 f3       	breq	.-16     	; 0x3c8 <__mulsf3+0x20>
 3d8:	95 0f       	add	r25, r21
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	55 1f       	adc	r21, r21
 3de:	62 9f       	mul	r22, r18
 3e0:	f0 01       	movw	r30, r0
 3e2:	72 9f       	mul	r23, r18
 3e4:	bb 27       	eor	r27, r27
 3e6:	f0 0d       	add	r31, r0
 3e8:	b1 1d       	adc	r27, r1
 3ea:	63 9f       	mul	r22, r19
 3ec:	aa 27       	eor	r26, r26
 3ee:	f0 0d       	add	r31, r0
 3f0:	b1 1d       	adc	r27, r1
 3f2:	aa 1f       	adc	r26, r26
 3f4:	64 9f       	mul	r22, r20
 3f6:	66 27       	eor	r22, r22
 3f8:	b0 0d       	add	r27, r0
 3fa:	a1 1d       	adc	r26, r1
 3fc:	66 1f       	adc	r22, r22
 3fe:	82 9f       	mul	r24, r18
 400:	22 27       	eor	r18, r18
 402:	b0 0d       	add	r27, r0
 404:	a1 1d       	adc	r26, r1
 406:	62 1f       	adc	r22, r18
 408:	73 9f       	mul	r23, r19
 40a:	b0 0d       	add	r27, r0
 40c:	a1 1d       	adc	r26, r1
 40e:	62 1f       	adc	r22, r18
 410:	83 9f       	mul	r24, r19
 412:	a0 0d       	add	r26, r0
 414:	61 1d       	adc	r22, r1
 416:	22 1f       	adc	r18, r18
 418:	74 9f       	mul	r23, r20
 41a:	33 27       	eor	r19, r19
 41c:	a0 0d       	add	r26, r0
 41e:	61 1d       	adc	r22, r1
 420:	23 1f       	adc	r18, r19
 422:	84 9f       	mul	r24, r20
 424:	60 0d       	add	r22, r0
 426:	21 1d       	adc	r18, r1
 428:	82 2f       	mov	r24, r18
 42a:	76 2f       	mov	r23, r22
 42c:	6a 2f       	mov	r22, r26
 42e:	11 24       	eor	r1, r1
 430:	9f 57       	subi	r25, 0x7F	; 127
 432:	50 40       	sbci	r21, 0x00	; 0
 434:	9a f0       	brmi	.+38     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 436:	f1 f0       	breq	.+60     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 438:	88 23       	and	r24, r24
 43a:	4a f0       	brmi	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	bb 1f       	adc	r27, r27
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	50 40       	sbci	r21, 0x00	; 0
 44c:	a9 f7       	brne	.-22     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	51 05       	cpc	r21, r1
 452:	80 f0       	brcs	.+32     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 454:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_inf>
 458:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_szero>
 45c:	5f 3f       	cpi	r21, 0xFF	; 255
 45e:	e4 f3       	brlt	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	98 3e       	cpi	r25, 0xE8	; 232
 462:	d4 f3       	brlt	.-12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 464:	86 95       	lsr	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f7 95       	ror	r31
 46e:	e7 95       	ror	r30
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	c1 f7       	brne	.-16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 474:	fe 2b       	or	r31, r30
 476:	88 0f       	add	r24, r24
 478:	91 1d       	adc	r25, r1
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	97 f9       	bld	r25, 7
 480:	08 95       	ret

00000482 <__fp_inf>:
 482:	97 f9       	bld	r25, 7
 484:	9f 67       	ori	r25, 0x7F	; 127
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	08 95       	ret

0000048e <__fp_nan>:
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	08 95       	ret

00000494 <__fp_pscA>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	16 16       	cp	r1, r22
 49a:	17 06       	cpc	r1, r23
 49c:	18 06       	cpc	r1, r24
 49e:	09 06       	cpc	r0, r25
 4a0:	08 95       	ret

000004a2 <__fp_pscB>:
 4a2:	00 24       	eor	r0, r0
 4a4:	0a 94       	dec	r0
 4a6:	12 16       	cp	r1, r18
 4a8:	13 06       	cpc	r1, r19
 4aa:	14 06       	cpc	r1, r20
 4ac:	05 06       	cpc	r0, r21
 4ae:	08 95       	ret

000004b0 <__fp_round>:
 4b0:	09 2e       	mov	r0, r25
 4b2:	03 94       	inc	r0
 4b4:	00 0c       	add	r0, r0
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__fp_round+0xc>
 4b8:	88 23       	and	r24, r24
 4ba:	52 f0       	brmi	.+20     	; 0x4d0 <__fp_round+0x20>
 4bc:	bb 0f       	add	r27, r27
 4be:	40 f4       	brcc	.+16     	; 0x4d0 <__fp_round+0x20>
 4c0:	bf 2b       	or	r27, r31
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__fp_round+0x18>
 4c4:	60 ff       	sbrs	r22, 0
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__fp_round+0x20>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
