
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003c4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000e88  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dc8  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020a8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 41 01 	call	0x282	; 0x282 <main>
  8e:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_sendChar>:
#include <avr/interrupt.h>
#define F_CPU 16000000UL                       // Clock Speed
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD -1

static inline void usart_sendChar(char value) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
	while ( !(UCSR0A & (1 << UDRE0)) )
  a2:	00 00       	nop
  a4:	80 ec       	ldi	r24, 0xC0	; 192
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	fc 01       	movw	r30, r24
  aa:	80 81       	ld	r24, Z
  ac:	88 2f       	mov	r24, r24
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	80 72       	andi	r24, 0x20	; 32
  b2:	99 27       	eor	r25, r25
  b4:	89 2b       	or	r24, r25
  b6:	b1 f3       	breq	.-20     	; 0xa4 <usart_sendChar+0xe>
	{

	}
	UDR0 = value;
  b8:	86 ec       	ldi	r24, 0xC6	; 198
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
}
  c2:	00 00       	nop
  c4:	0f 90       	pop	r0
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <usart_sendString>:

static inline void usart_sendString(char *message) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <usart_sendString+0x6>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	9a 83       	std	Y+2, r25	; 0x02
  d8:	89 83       	std	Y+1, r24	; 0x01
	while(*message)
  da:	0b c0       	rjmp	.+22     	; 0xf2 <usart_sendString+0x26>
	usart_sendChar(*message ++);
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	9c 01       	movw	r18, r24
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	3a 83       	std	Y+2, r19	; 0x02
  e8:	29 83       	std	Y+1, r18	; 0x01
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <usart_sendChar>
	}
	UDR0 = value;
}

static inline void usart_sendString(char *message) {
	while(*message)
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	fc 01       	movw	r30, r24
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	79 f7       	brne	.-34     	; 0xdc <usart_sendString+0x10>
	usart_sendChar(*message ++);
}
  fe:	00 00       	nop
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <usart_sendStringNewLine>:

static inline void usart_sendStringNewLine(char *message) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <usart_sendStringNewLine+0x6>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	9a 83       	std	Y+2, r25	; 0x02
 116:	89 83       	std	Y+1, r24	; 0x01
	usart_sendString(message);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <usart_sendString>
	usart_sendString("\r\n");
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 66 00 	call	0xcc	; 0xcc <usart_sendString>
}
 128:	00 00       	nop
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <init>:
#include <math.h>
#include <stdlib.h>
#include "adc.h"
#include "usart.h"

void init(){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= 0b01000000; //Select internal reference voltage and PIN ADC0 for analog input
 13c:	8c e7       	ldi	r24, 0x7C	; 124
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2c e7       	ldi	r18, 0x7C	; 124
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	20 64       	ori	r18, 0x40	; 64
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	ADCSRA |= 0b10101111; //Set ADEN, ADATE, ADIE bits to enable ADC auto trigger and interrupts, bits 0-2 set the prescaler to 128
 14e:	8a e7       	ldi	r24, 0x7A	; 122
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2a e7       	ldi	r18, 0x7A	; 122
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	2f 6a       	ori	r18, 0xAF	; 175
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	usart_Init();
 160:	0e 94 7d 01 	call	0x2fa	; 0x2fa <usart_Init>
	sei(); // Lets not forget to enable interrupts =P
 164:	78 94       	sei
	ADCSRA |= 0b01000000; //kick off ADC
 166:	8a e7       	ldi	r24, 0x7A	; 122
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	2a e7       	ldi	r18, 0x7A	; 122
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	20 64       	ori	r18, 0x40	; 64
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
}
 178:	00 00       	nop
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <outputDigitalData>:

void outputDigitalData(){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	2c 97       	sbiw	r28, 0x0c	; 12
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	volatile int val = ADCL | (ADCH << 8);
 194:	88 e7       	ldi	r24, 0x78	; 120
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	80 81       	ld	r24, Z
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	89 e7       	ldi	r24, 0x79	; 121
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	98 2f       	mov	r25, r24
 1ae:	88 27       	eor	r24, r24
 1b0:	82 2b       	or	r24, r18
 1b2:	93 2b       	or	r25, r19
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
	char buffer[10];
	usart_sendStringNewLine(itoa(val,buffer,10));
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	9e 01       	movw	r18, r28
 1be:	2d 5f       	subi	r18, 0xFD	; 253
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	0e 94 a0 01 	call	0x340	; 0x340 <itoa>
 1cc:	0e 94 85 00 	call	0x10a	; 0x10a <usart_sendStringNewLine>
}
 1d0:	00 00       	nop
 1d2:	2c 96       	adiw	r28, 0x0c	; 12
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <usart_sendChar>:
#include <avr/interrupt.h>
#define F_CPU 16000000UL                       // Clock Speed
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD -1

static inline void usart_sendChar(char value) {
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	1f 92       	push	r1
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	89 83       	std	Y+1, r24	; 0x01
	while ( !(UCSR0A & (1 << UDRE0)) )
 1f0:	00 00       	nop
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	80 72       	andi	r24, 0x20	; 32
 200:	99 27       	eor	r25, r25
 202:	89 2b       	or	r24, r25
 204:	b1 f3       	breq	.-20     	; 0x1f2 <usart_sendChar+0xe>
	{

	}
	UDR0 = value;
 206:	86 ec       	ldi	r24, 0xC6	; 198
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
}
 210:	00 00       	nop
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <usart_sendString>:

static inline void usart_sendString(char *message) {
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	00 d0       	rcall	.+0      	; 0x220 <usart_sendString+0x6>
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
	while(*message)
 228:	0b c0       	rjmp	.+22     	; 0x240 <usart_sendString+0x26>
	usart_sendChar(*message ++);
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	9c 01       	movw	r18, r24
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	3a 83       	std	Y+2, r19	; 0x02
 236:	29 83       	std	Y+1, r18	; 0x01
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <usart_sendChar>
	}
	UDR0 = value;
}

static inline void usart_sendString(char *message) {
	while(*message)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	79 f7       	brne	.-34     	; 0x22a <usart_sendString+0x10>
	usart_sendChar(*message ++);
}
 24c:	00 00       	nop
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <usart_sendStringNewLine>:

static inline void usart_sendStringNewLine(char *message) {
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <usart_sendStringNewLine+0x6>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	9a 83       	std	Y+2, r25	; 0x02
 264:	89 83       	std	Y+1, r24	; 0x01
	usart_sendString(message);
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	0e 94 0d 01 	call	0x21a	; 0x21a <usart_sendString>
	usart_sendString("\r\n");
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 0d 01 	call	0x21a	; 0x21a <usart_sendString>
}
 276:	00 00       	nop
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <main>:
#include "adc.h"
#include "usart.h"
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	init();
 28a:	0e 94 9a 00 	call	0x134	; 0x134 <init>
	usart_sendStringNewLine("Go...");
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 2c 01 	call	0x258	; 0x258 <usart_sendStringNewLine>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <__vector_21>:

ISR(ADC_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	outputDigitalData();
 2cc:	0e 94 c0 00 	call	0x180	; 0x180 <outputDigitalData>
}
 2d0:	00 00       	nop
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <usart_Init>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "usart.h"

void usart_Init() {
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62

	/*Set baud rate */
	UBRR0H = (MYUBRR >> 8);
 302:	85 ec       	ldi	r24, 0xC5	; 197
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	10 82       	st	Z, r1
	UBRR0L = MYUBRR;
 30a:	84 ec       	ldi	r24, 0xC4	; 196
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	27 e6       	ldi	r18, 0x67	; 103
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18

	UCSR0B |= (1 << TXEN0);      // Enable transmitter
 314:	81 ec       	ldi	r24, 0xC1	; 193
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	21 ec       	ldi	r18, 0xC1	; 193
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	28 60       	ori	r18, 0x08	; 8
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
 326:	82 ec       	ldi	r24, 0xC2	; 194
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	22 ec       	ldi	r18, 0xC2	; 194
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	26 60       	ori	r18, 0x06	; 6
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
}
 338:	00 00       	nop
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <itoa>:
 340:	45 32       	cpi	r20, 0x25	; 37
 342:	51 05       	cpc	r21, r1
 344:	20 f4       	brcc	.+8      	; 0x34e <itoa+0xe>
 346:	42 30       	cpi	r20, 0x02	; 2
 348:	10 f0       	brcs	.+4      	; 0x34e <itoa+0xe>
 34a:	0c 94 ab 01 	jmp	0x356	; 0x356 <__itoa_ncheck>
 34e:	fb 01       	movw	r30, r22
 350:	10 82       	st	Z, r1
 352:	cb 01       	movw	r24, r22
 354:	08 95       	ret

00000356 <__itoa_ncheck>:
 356:	bb 27       	eor	r27, r27
 358:	4a 30       	cpi	r20, 0x0A	; 10
 35a:	31 f4       	brne	.+12     	; 0x368 <__itoa_ncheck+0x12>
 35c:	99 23       	and	r25, r25
 35e:	22 f4       	brpl	.+8      	; 0x368 <__itoa_ncheck+0x12>
 360:	bd e2       	ldi	r27, 0x2D	; 45
 362:	90 95       	com	r25
 364:	81 95       	neg	r24
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__utoa_common>

0000036c <__utoa_ncheck>:
 36c:	bb 27       	eor	r27, r27

0000036e <__utoa_common>:
 36e:	fb 01       	movw	r30, r22
 370:	55 27       	eor	r21, r21
 372:	aa 27       	eor	r26, r26
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	aa 1f       	adc	r26, r26
 37a:	a4 17       	cp	r26, r20
 37c:	10 f0       	brcs	.+4      	; 0x382 <__utoa_common+0x14>
 37e:	a4 1b       	sub	r26, r20
 380:	83 95       	inc	r24
 382:	50 51       	subi	r21, 0x10	; 16
 384:	b9 f7       	brne	.-18     	; 0x374 <__utoa_common+0x6>
 386:	a0 5d       	subi	r26, 0xD0	; 208
 388:	aa 33       	cpi	r26, 0x3A	; 58
 38a:	08 f0       	brcs	.+2      	; 0x38e <__utoa_common+0x20>
 38c:	a9 5d       	subi	r26, 0xD9	; 217
 38e:	a1 93       	st	Z+, r26
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	79 f7       	brne	.-34     	; 0x372 <__utoa_common+0x4>
 394:	b1 11       	cpse	r27, r1
 396:	b1 93       	st	Z+, r27
 398:	11 92       	st	Z+, r1
 39a:	cb 01       	movw	r24, r22
 39c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <strrev>

000003a0 <strrev>:
 3a0:	dc 01       	movw	r26, r24
 3a2:	fc 01       	movw	r30, r24
 3a4:	67 2f       	mov	r22, r23
 3a6:	71 91       	ld	r23, Z+
 3a8:	77 23       	and	r23, r23
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <strrev+0x4>
 3ac:	32 97       	sbiw	r30, 0x02	; 2
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <strrev+0x18>
 3b0:	7c 91       	ld	r23, X
 3b2:	6d 93       	st	X+, r22
 3b4:	70 83       	st	Z, r23
 3b6:	62 91       	ld	r22, -Z
 3b8:	ae 17       	cp	r26, r30
 3ba:	bf 07       	cpc	r27, r31
 3bc:	c8 f3       	brcs	.-14     	; 0x3b0 <strrev+0x10>
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
